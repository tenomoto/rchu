[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Rの使い方の例を掲載します。"
  },
  {
    "objectID": "posts/qr.html",
    "href": "posts/qr.html",
    "title": "QR",
    "section": "",
    "text": "RでQRコードを作成するには、パッケージqrcodeを使う。\nlibrary(qrcode)\npng(\"qr.png\", 144, 144) # 144 x 144 pixels\nplot(qr_code(\"https://tenomoto.github.io/rchu/\"))\ndev.off()"
  },
  {
    "objectID": "posts/predator-prey.html",
    "href": "posts/predator-prey.html",
    "title": "捕食・被食モデル",
    "section": "",
    "text": "捕食・被食関係にある2種の個体群の集団密度の時間変動を表す数理モデルは、Lotka–Volterraモデルとして知られている。 化学反応 (Lotka 1920)や魚種交替のモデル (Volterra 1926) として提案され、NPZモデル (Franks et al. 1986) の基礎となっているだけでなく、積雲対流の自己組織化のモデル (Nober and Graf 2005) にも応用されている。 ここでは、Lawson et al. (1995) に基づいて、捕食・被食モデルを作成し、その随伴を作成する。"
  },
  {
    "objectID": "posts/predator-prey.html#支配方程式系",
    "href": "posts/predator-prey.html#支配方程式系",
    "title": "捕食・被食モデル",
    "section": "支配方程式系",
    "text": "支配方程式系\n捕食・被食モデルを次の二元連立非線型常微分方程式系で表す。\n\\[\n\\begin{aligned}\n\\frac{\\mathrm{d}x}{\\mathrm{d}t} &= x(a_1 + a_2x + a_3y) \\\\\n\\frac{\\mathrm{d}y}{\\mathrm{d}t} &= y(a_4 + a_5y + a_6x)\n\\end{aligned}\n\\]\n\\(a_1, a_2, a_3\\) 及 び\\(a_4, a_5, a_6\\) は、それぞれ被食者と捕食者の比成長率 \\(\\mathrm{d}^{-1}\\) 、依存性 \\((\\text{Number}\\,\\mathrm{m}^{-2})^{-1}\\mathrm{d}^{-1}\\) 、減少率 \\((\\text{Number}\\,\\mathrm{m}^{-2})^{-1}\\mathrm{d}^{-1}\\) を表し、 \\(x, y\\) はそれぞれ被食者と捕食者の個体数 \\(\\text{Number}\\,\\mathrm{m}^{-2}\\) を表す。"
  },
  {
    "objectID": "posts/predator-prey.html#順行モデル",
    "href": "posts/predator-prey.html#順行モデル",
    "title": "捕食・被食モデル",
    "section": "順行モデル",
    "text": "順行モデル\n早速Rで実装して、15日間の時間変化を計算してみる。\n\ndt &lt;- 0.001\na &lt;- c(4, -2, -4, -6, 2, 4)\nx1 &lt;- 1\ny1 &lt;- 1\nnmax &lt;- 15001\n\nx &lt;- rep(0, nmax)\ny &lt;- rep(0, nmax)\nx[1] &lt;- x1\ny[1] &lt;- y1\nfor (n in 1:(nmax-1)) {\n  x[n+1] &lt;- x[n] + dt * (x[n] * (a[1] + a[2] * x[n] + a[3] * y[n]))\n  y[n+1] &lt;- y[n] + dt * (y[n] * (a[4] + a[5] * y[n] + a[6] * x[n]))\n}\n\nまず、位相平面で捕食者と被食者の個体数の変化を描画する。\n\nplot(x, y, type = \"l\", lwd = 2,\n     xlab = \"Prey (x)\", ylab = \"Predator (y)\",\n     cex.lab = 1.5, cex.axis = 1.5,\n     xlim = c(0, 2), ylim = c(0, 2))\nx.nc &lt;- seq(0, 2, length.out = 100)\npoints(x1, y1, pch = 4, lwd = 2, cex = 2)\nlines(x.nc, -(a[1] + a[2] * x.nc) / a[3], lwd = 2, lty = 2, col = \"red\")\nlines(x.nc, -(a[4] + a[6] * x.nc) / a[5], lwd = 2, lty = 2, col = \"blue\")\nlegend(\"topright\", legend = c(\"x vs y\",\"dx/dt = 0\", \"dy/dt = 0\"),\n       col = c(\"black\",\"red\", \"blue\"), lwd = 2, lty = c(1, 2, 2), cex = 1.5)\n\n\n\n\n\n\n\n\n\\(\\times\\)が初期位置で、個体数の変化は曲線で表されている。 二つの破線は、捕食者（青）と被食者（赤）の個体数がそれぞれ変化しない定常状態を表している。\n次に、時間変化を描画する。\n\nplot(seq(0, 15, by = dt), x, type = \"l\", lwd = 2, col = \"red\",\n     xlab = \"Time (days)\", ylab = \"Density\",\n     cex.lab = 1.5, cex.axis = 1.5,\n     xlim = c(0, 15), ylim = c(0, 2))\nlines(seq(0, 15, by = dt), y, lwd = 2, col = \"blue\")\nlegend(\"topright\", legend = c(\"Prey (x)\", \"Predator (y)\"),\n       col = c(\"red\", \"blue\"), lwd = 2, cex = 1.5)"
  },
  {
    "objectID": "posts/predator-prey.html#随伴法",
    "href": "posts/predator-prey.html#随伴法",
    "title": "捕食・被食モデル",
    "section": "随伴法",
    "text": "随伴法\n初期値やパラメタなど制御変数を\\(\\mathbf{x} = (x_1, \\dots, x_m)^\\mathrm{T}\\)とし、状態変数を\\(\\mathbf{z}= (z_1, \\dots, z_N)^\\mathrm{T}\\)とする。 捕食・被食モデルの場合は\\(\\mathbf{x} = (x_1, y_1, a_1, a_2, a_3, a_4, a_5, a_6)^\\mathrm{T}\\)である。 状態変数は\\((x(t), y(t))\\)と二要素あるが、ここでは各時刻\\(n\\)ではスカラー\\(z_n\\)とする。 随伴モデルの作成の際は、最後の時刻の状態変数\\(z_{N+1}\\)をコスト函数\\(z_{N+1} = J(\\mathbf{x}, z_1, \\dots, z_{N})\\)とする。 モデルを\\(f_n\\)で表すと、順行計算は次のように表される。\n\\[\nz_1 = f_1(\\mathbf{x}),\\;z_n = f_n(\\mathbf{x}, z_1, \\dots, z_{n-1}),\\;n = 2, \\dots, N + 1\n\\tag{1}\\]\nここで、コスト函数の入力ベクトル\\(\\mathbf{x}\\)に関する微分の計算を容易にするため、Lagrangeの未定乗数法を用いる。\n\\[\nL(\\mathbf{x}, \\mathbf{z}, \\lambda) = J(\\mathbf{x}, z_1, \\dots, z_{N}) - \\lambda_1(z_1 - f_1(\\mathbf{x})) - \\sum_{n=2}^{N+1} \\lambda_n (z_n - f_n(\\mathbf{x}, z_1, \\dots, z_{n-1}))\n\\tag{2}\\]\nここで\\(\\boldsymbol\\lambda = (\\lambda_1,\\dots,\\lambda_{N+1})^\\mathrm{T}\\)はLagrangeの未定乗数である。 Lagrange函数の鞍点は、\\(\\mathbf{x},\\mathbf{z}, \\boldsymbol\\lambda\\)空間で\\(L\\)の微分が同時に0になる一点である。 鞍点では、\\(\\partial L/\\partial \\boldsymbol\\lambda\\)から支配方程式(Equation 1) が得られる。\nまた、\\(\\partial L/\\partial \\mathbf{z}\\)から随伴方程式 \\[\n\\lambda_{N+1} = \\frac{\\partial J}{\\partial z_{N+1}},\\;\\lambda_n = \\frac{\\partial J}{\\partial z_n} + \\sum_{i=n+1}^{N+1} \\frac{\\partial f_i}{\\partial z_n}\\lambda_{i} ,\\;n = N, \\dots, 1\n\\tag{3}\\] が得られる。\nさらに、\\(\\partial L/\\partial \\mathbf{x}\\)からコスト函数の入力に対する微分、\n\\[\n(\\nabla_\\mathbf{x}J)_k = (\\nabla_\\mathbf{x}L)_k = \\frac{\\partial L}{\\partial x_k} = \\sum_{i=1}^{N+1} \\frac{\\partial f_i}{\\partial x_k}\\lambda_i,\\;k = 1, \\dots, m\n\\tag{4}\\] が得られる。\nEquation 4は、モデルの制御変数についての微分にEquation 3 で計算された各ステップの未定乗数を掛けたものを全てのタイムステップで足し合わせれば、コスト函数の制御変数についての微分が求められることを示している。\nEquation 4 は、ステップ n+1 以前についてモデルの状態変数についての微分に未定乗数を掛けたものを足し合わせて、ステップ n でのコスト函数の勾配を加えたものが、ステップ n での未定乗数であることを示している。"
  },
  {
    "objectID": "posts/predator-prey.html#随伴モデルの作成",
    "href": "posts/predator-prey.html#随伴モデルの作成",
    "title": "捕食・被食モデル",
    "section": "随伴モデルの作成",
    "text": "随伴モデルの作成\n方程式系の随伴の作り方には、大別して二つの方法がある。\n\n支配方程式系に随伴函数を掛けて、部分積分をして、随伴方程式を求めてから離散化して随伴モデルを作る。\n支配方程式系を離散化し、その接線型モデルを作り、接線型モデルを元に随伴モデルを作成する。\n\nここでは、これらとは異なり、離散化された順行モデルのプログラムの各行から随伴モデルを作成する。\n順行プログラムの一行は \\[\nY = G(X, \\dots)\n\\] と表される。 \\(Y\\)は右辺により再定義される従属変数である。 次のステップの値など中間変数を\\(Z\\)で表すと、順行モデルの典型的な二行は \\[\n\\begin{aligned}\nY &= G(X, \\dots) \\\\\nZ &= F(X, Y, \\dots)\n\\end{aligned}\n\\] となる。 この例におけるLagrange函数は次のように書ける。\n\\[\nL = \\dots -\\lambda_Y(Y - G(X, \\dots)) - \\lambda_Z(Z - F(X, Y, \\dots)) + \\dots\n\\tag{5}\\]\n(Equation 2)のように、未定乗数は状態\\(z_k\\)の一つに対して一つずつ用意する。 Lagrange函数を明示的に作る必要はないが、コードに基づくLagrange函数とLagrange函数 (Equation 2) との対応をつけるために、その形を示した。\n\\(Y\\)についての微分が0となることから\n\\[\n\\frac{\\partial L}{\\partial Y} = -\\lambda_Y + \\lambda_Z\\frac{\\partial F}{\\partial Y} + \\dots = 0\n\\] つまり\n\\[\n\\lambda_Y = \\lambda_Z\\frac{\\partial F}{\\partial Y} + \\dots\n\\] となる。 これらの項は、右辺に\\(Y\\)が現れるところで計算し積算する必要がある。\n\\[\n\\lambda_Y = \\lambda_Y + \\lambda_Z\\frac{\\partial F}{\\partial Y}\n\\tag{6}\\] Lagrangeの未定乗数は積算する前に、0に初期化する必要があることに注意。\n同様に、コスト函数の\\(X\\)に関する微分はLagrange函数 \\(L\\) の \\(X\\) についての偏微分であり、 これを \\(X\\) についての未定乗数 \\(\\lambda_X\\) と呼ぶと\n\\[\n\\lambda_X = \\lambda_X + \\lambda_Z\\frac{\\partial F}{\\partial X}\n\\tag{7}\\]\nが得られる。 つまり、Equation 7 は変数が従属変数である Equation 6 と同型なので、同一の方法を適用すればよい。\nそれでは、この方法で随伴モデルを作成する。\n\nforward &lt;- function(dt, a, x1, y1, nmax) {\n  x &lt;- rep(0, nmax)\n  y &lt;- rep(0, nmax)\n  x[1] &lt;- x1\n  y[1] &lt;- y1\n  for (n in 1:(nmax-1)) {\n    x[n+1] &lt;- x[n] + dt * (x[n] * (a[1] + a[2] * x[n] + a[3] * y[n]))\n    y[n+1] &lt;- y[n] + dt * (y[n] * (a[4] + a[5] * y[n] + a[6] * x[n]))\n  }\n  list(x = x, y = y)\n}\n\nadjoint &lt;- function(dt, a, x, y, xo, yo, tobs) {\n  nmax &lt;- length(x)\n  aa &lt;- rep(0, length(a))\n  ax &lt;- rep(0, nmax)\n  ay &lt;- rep(0, nmax)\n  for (n in (nmax-1):1) {\n    aa[6] &lt;- aa[6] + dt * x[n] * y[n] * ay[n+1]\n    aa[5] &lt;- aa[5] + dt * y[n] * y[n] * ay[n+1]\n    aa[4] &lt;- aa[4] + dt * y[n] * ay[n+1]\n    ax[n] &lt;- ax[n] + dt * a[6] * y[n] * ay[n+1]\n    ay[n] &lt;- ay[n] + dt * a[5] * y[n] * ay[n+1]\n    ay[n] &lt;- ay[n] + (1 + dt * (a[4] + a[5] * y[n] + a[6] * x[n])) * ay[n+1]\n    aa[3] &lt;- aa[3] + dt * y[n] * x[n] * ax[n+1]\n    aa[2] &lt;- aa[2] + dt * x[n] * x[n] * ax[n+1]\n    aa[1] &lt;- aa[1] + dt * x[n] * ax[n+1]\n    ay[n] &lt;- ay[n] + dt * a[3] * x[n] * ax[n+1]\n    ax[n] &lt;- ax[n] + dt * a[2] * x[n] * ax[n+1]\n    ax[n] &lt;- ax[n] + (1 + dt * (a[1] + a[2] * x[n] + a[3] * y[n])) * ax[n+1]\n    if (n %in% tobs) {\n      ax[n] &lt;- ax[n] + (x[n] - xo[n])\n      ay[n] &lt;- ay[n] + (y[n] - yo[n])\n    }\n #   cat(n, \":\", aa, ax[n], ay[n], \"\\n\")\n  }\n#  cat(\"Final adjoint state:\", aa, \"\\n\")\n  c(aa, ax[1], ay[1])\n}"
  },
  {
    "objectID": "posts/predator-prey.html#同化実験",
    "href": "posts/predator-prey.html#同化実験",
    "title": "捕食・被食モデル",
    "section": "同化実験",
    "text": "同化実験\nまずは、順行モデルを実行して、真値を作成する。\n\nnmax &lt;- 501\ndt &lt;- 0.001\nat &lt;- c(4, -2, -4, -6, 2, 4)\nx1 &lt;- 1\ny1 &lt;- 1\ntobs &lt;- seq(2, nmax, by = 2)\nforward.result &lt;- forward(dt, at, x1, y1, nmax)\nxt &lt;- forward.result$x\nyt &lt;- forward.result$y\n\n真値から観測を作成する。\n\nxo &lt;- xt\nyo &lt;- yt\n\n\ncalc.cost &lt;- function(xf, yf, xo, yo) {\n  0.5 * (sum((xf- xo)^2 + (yf - yo)^2)) \n}\n\n観測値を同化して順行モデルのパラメタと初期値を推定する。 同化するための準備として、制御変数、履歴を格納するリスト、コスト函数と勾配を定義する。 コスト函数と勾配の評価に必要な引数は、optim() の可変引数 ... で受け取る。 履歴は、&lt;&lt;-を使ってグローバル変数に代入する。\n\na &lt;- c(1, 0, 0, -1, 0, 0)\nx1 &lt;- 2\ny1 &lt;- 2\npar &lt;- c(a, x1, y1)\ntobs &lt;- seq(2, nmax, by = 2)\ncntl &lt;- list(maxit = 100, reltol = 1e-5)\n\nhist &lt;- list(cost = numeric(0), gnorm = numeric(0), par = vector(length=0))\n\nfn &lt;- function(par, dt, nmax, xo, yo, tobs) {\n  xyf &lt;- forward(dt, par[1:6], par[7], par[8], nmax)\n  cost &lt;- calc.cost(xyf$x[tobs], xyf$y[tobs], xo[tobs], yo[tobs])\n  cost\n}\n\ngr &lt;- function(par, dt, nmax, xo, yo, tobs){\n  xyf &lt;- forward(dt, par[1:6], par[7], par[8], nmax)\n  hist$par &lt;&lt;- rbind(hist$par, par)\n  cost &lt;- calc.cost(xyf$x[tobs], xyf$y[tobs], xo[tobs], yo[tobs])\n  hist$cost &lt;&lt;- c(hist$cost, cost)\n  grad &lt;- adjoint(dt, par[1:6], xyf$x, xyf$y, xo, yo, tobs)\n  hist$gnorm &lt;&lt;- c(hist$gnorm, sqrt(sum(grad^2)))\n  grad\n}\n\nRには組込の函数 optim()があるので、これを最適化に使う。 BFGS法を用いると、初期値もパラメタもうまく推定できる。\n\nmethod &lt;- \"BFGS\"\nres &lt;- optim(par, fn, gr, method = method, control = cntl, dt, nmax, xo, yo, tobs)\n\n\nplot(log10(hist$cost), type = \"l\", lwd = 2,\n     main = paste(\"cost\", method), xlab = \"Iteration\", ylab = \"log10 J\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\n\n\n\n\n\n\n\n\n\nplot(log10(hist$gnorm), type = \"l\", lwd = 2,\n     main = paste(\"gnorm\", method), xlab = \"Iteration\", ylab = \"log10|g|\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\n\n\n\n\n\n\n\n\n\nplot(hist$par[, 7], ylim = c(0, 2), type = \"l\", lwd = 2, xlab = \"Iteration\", ylab = \"Initial conditions\",\n     main = paste(\"init\", method), cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\nlines(hist$par[, 8], lwd = 2, col = \"red\")\nlegend(\"topright\", legend = c(\"x1\", \"y1\"),\n       col = c(\"black\", \"red\"), lwd = 2, cex = 1.5)\n\n\n\n\n\n\n\n\n\nplot(hist$par[, 1], ylim = c(-10, 10), type = \"l\", lwd = 2,\n     main = paste(\"prey parameters\", method), xlab = \"Iteration\", ylab = \"x parameters\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\nlines(hist$par[, 2], lwd = 2, col = \"red\")\nlines(hist$par[, 3], lwd = 2, col = \"blue\")\nlegend(\"topleft\", legend = c(\"a1\", \"a2\", \"a3\"),\n       col = c(\"black\", \"red\", \"blue\"), lwd = 2, cex = 1)\n\n\n\n\n\n\n\n\n\nplot(hist$par[, 4], ylim = c(-10, 10), type = \"l\", lwd = 2, \n     main = paste(\"predator parameters\", method), xlab = \"Iteration\", ylab = \"y parameters\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\nlines(hist$par[, 5], lwd = 2, col = \"red\")\nlines(hist$par[, 6], lwd = 2, col = \"blue\")\nlegend(\"topleft\", legend = c(\"a4\", \"a5\", \"a6\"),\n       col = c(\"black\", \"red\", \"blue\"), lwd = 2, cex = 1)\n\n\n\n\n\n\n\n\n共軛勾配法は収束が遅い。\n\nhist &lt;- list(cost = numeric(0), gnorm = numeric(0), par = vector(length=0))\n\ncntl &lt;- list(maxit = 200, reltol = 1e-5)\nmethod &lt;- \"CG\"\nres &lt;- optim(par, fn, gr, method = method, control = cntl, dt, nmax, xo, yo, tobs)\n\n\nplot(log10(hist$cost), type = \"l\", lwd = 2,\n     main = paste(\"cost\", method), xlab = \"Iteration\", ylab = \"log10 J\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\n\n\n\n\n\n\n\n\n\nplot(log10(hist$gnorm), type = \"l\", lwd = 2,\n     main = paste(\"gnorm\", method), xlab = \"Iteration\", ylab = \"log10|g|\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\n\n\n\n\n\n\n\n\n\nplot(hist$par[, 7], ylim = c(0, 2), type = \"l\", lwd = 2, \n     main = paste(\"init\", method), xlab = \"Iteration\", ylab = \"Initial conditions\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\nlines(hist$par[, 8], lwd = 2, col = \"red\")\nlegend(\"topright\", legend = c(\"x1\", \"y1\"),\n       col = c(\"black\", \"red\"), lwd = 2, cex = 1.5)\n\n\n\n\n\n\n\n\n\nplot(hist$par[, 1], ylim = c(-10, 10), type = \"l\", lwd = 2,\n     main = paste(\"prey parameters\", method), xlab = \"Iteration\", ylab = \"x parameters\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\nlines(hist$par[, 2], lwd = 2, col = \"red\")\nlines(hist$par[, 3], lwd = 2, col = \"blue\")\nlegend(\"topleft\", legend = c(\"a1\", \"a2\", \"a3\"),\n       col = c(\"black\", \"red\", \"blue\"), lwd = 2, cex = 1)\n\n\n\n\n\n\n\n\n\nplot(hist$par[, 4], ylim = c(-10, 10), type = \"l\", lwd = 2,\n     main = paste(\"predator parameters\", method), xlab = \"Iteration\", ylab = \"y parameters\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\nlines(hist$par[, 5], lwd = 2, col = \"red\")\nlines(hist$par[, 6], lwd = 2, col = \"blue\")\nlegend(\"topleft\", legend = c(\"a4\", \"a5\", \"a6\"),\n       col = c(\"black\", \"red\", \"blue\"), lwd = 2, cex = 1)"
  },
  {
    "objectID": "posts/roc.html",
    "href": "posts/roc.html",
    "title": "ROCスコア",
    "section": "",
    "text": "Kharin and Zwiers (2003) に基づいて、ROC（Relative Operating Characteristic, 相対運用特性）曲線やROCスコアについて述べる。"
  },
  {
    "objectID": "posts/roc.html#気候システムとモデルによる予測",
    "href": "posts/roc.html#気候システムとモデルによる予測",
    "title": "ROCスコア",
    "section": "気候システムとモデルによる予測",
    "text": "気候システムとモデルによる予測\nノイズを含む気候システムとその予測を次のように表す。\n\\[\n\\begin{aligned}\nX &= \\beta + \\epsilon\\\\\nF &= \\beta' + \\epsilon'\n\\end{aligned}\n\\]\n\\(X\\) は被予測変数、 \\(\\beta\\) は潜在的予測可能なシグナル、 \\(\\epsilon\\) はノイズで、その分散は \\(\\sigma^2_\\epsilon\\) であるとする。 \\(F\\) は予報、 \\(\\beta'\\) はシミュレートされたシグナル、 \\(\\epsilon'\\) はノイズを表す。 完全予測システムでは、 \\(\\beta = \\beta',\\,\\sigma^2_{\\epsilon'} = \\sigma^2_\\epsilon\\) となる。"
  },
  {
    "objectID": "posts/roc.html#予測システム検証用二元分割表",
    "href": "posts/roc.html#予測システム検証用二元分割表",
    "title": "ROCスコア",
    "section": "予測システム検証用二元分割表",
    "text": "予測システム検証用二元分割表\n\\(2\\times 2\\)の分割表に基づいて、気候予測に基づく警報の検証を考える。\n\n\n\n観測\n警報あり\n警報なし\n計\n\n\n\n\n現象あり\n\\(H\\)\n\\(M\\)\n\\(O\\)\n\n\n現象なし\n\\(\\mathrm{FA}\\)\n\\(\\mathrm{CR}\\)\n\\(O'\\)\n\n\n計\n\\(W\\)\n\\(W'\\)\n\\(N\\)\n\n\n\n\\(N\\)回の予測中、\\(O\\)回事例が発生、\\(O' = N - O\\)回事例は発生せず、 \\(W\\) 回警報を出し、 \\(W' = N - W\\) 回出さなかったとする。 \\(H\\) は当たり（hit）、\\(M\\) は見逃し（miss）、 \\(\\mathrm{FA}\\)は空振り（false alarm）、 \\(CR\\) は見送り（correct rejection）の回数を表す。\nこのとき、的中率は \\(\\mathrm{HR} = H / O\\)、空振り率は \\(\\mathrm{FAR} = \\mathrm{FA} / O'\\) で表される。 \\(\\mathrm{HR} = 1\\; \\mathrm{FAR} = 0\\) ならば予測は完璧である。 一方、\\(\\mathrm{HR} = \\mathrm{FAR}\\) は、スキルがないことを表す。 \\(\\mathrm{HR} = 1\\; \\mathrm{FAR} = 1\\) は、常に警報を出しており、 \\(\\mathrm{HR} = 0\\; \\mathrm{FAR} = 0\\) は、常に警報を出していないことを表す。"
  },
  {
    "objectID": "posts/roc.html#確率的予測システム",
    "href": "posts/roc.html#確率的予測システム",
    "title": "ROCスコア",
    "section": "確率的予測システム",
    "text": "確率的予測システム\nアンサンブル予測システムにおいて、確率 \\(P&gt;P_{\\mathrm{cr}}\\) のときに警報を出すことにする。 的中率と空振り率は臨界確率 \\(P_{\\mathrm{cr}}\\) の関数として次のように表される。\n\\[\n\\begin{aligned}\n\\mathrm{HR}(P_{\\mathrm{cr}}) &= \\int_{\\Omega_P} f(P|E = 1)\\mathrm{d}P\\\\\n\\mathrm{FAR}(P_{\\mathrm{cr}}) &= \\int_{\\Omega_P} f(P|E = 0)\\mathrm{d}P\n\\end{aligned}\n\\tag{1}\\]\nここで \\(\\Omega_P\\)は 予報確率 \\(P&gt;P_{\\mathrm{cr}}\\) 、 \\(f(P|E)\\) は確率予報の現象あり（\\(E=1\\)）またはなし （\\(E=0\\)）の条件付確率密度函数を表し、 Bayesの定理により次のように書ける。\n\\[\nf(P|E) = \\frac{f(E|P)f_P(P)}{f_E(E)}\n\\tag{2}\\]\nここで、 \\(f(E|P)\\) は予報確率 \\(P\\) の下での予報対象 \\(E\\) の条件付確率密度函数、\\(f_P(P)\\) 及び \\(f_E(E)\\) はそれぞれアンサンブル予報と予報対象の周辺確率密度関数である。\n標本のばらつきを無視し、\\(P=P(\\beta')\\) であるとする。 さらに、完全予測を仮定して \\(\\beta' = \\beta\\) とする。\nEquation 2をEquation 1に代入、上記の仮定を用いると\n\\[\n\\begin{aligned}\n\\mathrm{HR}(P_{\\mathrm{cr}}) &= \\frac{1}{\\mathrm{P_r}(E=1)}\\int_{\\Omega_{\\beta}} f(E = 1|\\beta)f_{\\beta}(\\beta)\\mathrm{d}\\beta\\\\\n\\mathrm{FAR}(P_{\\mathrm{cr}}) &= \\frac{1}{\\mathrm{P_r}(E=0)}\\int_{\\Omega_{\\beta}} f(E = 0|\\beta)f_{\\beta}(\\beta)\\mathrm{d}\\beta\n\\end{aligned}\n\\tag{3}\\]\nと書ける。"
  },
  {
    "objectID": "posts/roc.html#等確率",
    "href": "posts/roc.html#等確率",
    "title": "ROCスコア",
    "section": "等確率",
    "text": "等確率\nここで、季節予報のような3分類、平年より低い（B）、平年並み（N）、平年より高い（A）の予報を考える。 現象の確率密度函数はガウス分布であるとする。\n\ncurve(dnorm, -5, 5)\nPr &lt;- 1 / 3\nsegments(qnorm(Pr), 0, qnorm(Pr), dnorm(qnorm(Pr)), lty = 3, lwd = 2)\nsegments(qnorm(1-Pr), 0, qnorm(1-Pr), dnorm(qnorm(1-Pr)), lty = 3, lwd = 2)\ntext(c(-1, 0, 1), rep(0.1, 3), c(\"B\", \"N\", \"A\"), cex = 2)"
  },
  {
    "objectID": "posts/roc.html#潜在予測可能性",
    "href": "posts/roc.html#潜在予測可能性",
    "title": "ROCスコア",
    "section": "潜在予測可能性",
    "text": "潜在予測可能性\n気候システム全体の分散で規格化した予測可能シグナルの分散を潜在予測可能性と定義する。\n\\[\n\\rho_{\\mathrm{pot}}^2 = \\frac{\\sigma_\\beta^2}{\\sigma_X^2}\n\\]\n\\(\\sigma_X^2 = \\sigma_\\beta^2 + \\sigma_\\epsilon^2\\) という関係がある。 以下、\\(\\sigma_X = 1\\) とする。\nシグナルは平均0、分散 \\(\\sigma_\\beta^2\\) のガウス分布に従うものとする。\n\\[f_\\beta(\\beta) \\sim N(0, \\sigma_\\beta^2)\\]\n例えば、平年より高い（A）は\n\\[f(E=1|\\beta) = 1- F(q_\\mathrm{a}|\\beta, \\sigma_\\epsilon)\\]\nと表される。 ここで\\(F(q, \\mu, \\sigma^2)\\) はガウス分布の累積確率密度函数を表す。 一方、平年並み（N）は\n\\[F(q_\\mathrm{a}|\\beta, \\sigma_\\epsilon) - F(q_\\mathrm{b}|\\beta, \\sigma_\\epsilon)\\]\nと表される。 また、現象なしの条件付確立密度函数は次のように表される。\n\\[f(E=0|\\beta) = 1 - f(E=1|\\beta)\\]"
  },
  {
    "objectID": "posts/roc.html#roc曲線",
    "href": "posts/roc.html#roc曲線",
    "title": "ROCスコア",
    "section": "ROC曲線",
    "text": "ROC曲線\n上述の等確率の例で、異なる潜在予測可能性に対して、閾値 \\(P_{\\mathrm{cr}}\\) を変化させながらEquation 3を数値的に評価し、横軸を空振り率、縦軸を的中率として表したROC曲線が次の図である。 スキルのない予報は斜めの破線、完璧な予報は原点、 \\((0,\\,1)\\) 、 \\((1,\\,1)\\) を繋ぐ折れ線で表される。\n\n\nCode\nroc_ab &lt;- function(rpot, Pcr, Pr = 1 / 3) {\n  sb &lt;- sqrt(rpot)\n  se &lt;- sqrt(1 - rpot)\n  qa &lt;- qnorm(1 - Pr)\n  bcr &lt;- qa - qnorm(1 - Pcr, 0, se)\n  bcr[bcr==Inf] &lt;- 1000 # adhoc fix to avoid FAR = HR = 0 for Pcr = Inf\n  fb &lt;- function(b) {dnorm(b, 0, sb)}\n  f_E0_b &lt;- function(b){pnorm(qa, b, se)}\n  f_E1_b &lt;- function(b){1 - pnorm(qa, b, se)}\n  HR &lt;- rep(0, length(bcr))\n  FAR &lt;- rep(0, length(bcr))\n  for (i in 1:length(bcr)) {\n    HR[i] &lt;- integrate(function(b){f_E1_b(b) * fb(b)}, lower = bcr[i], upper = Inf)$value / Pr\n    FAR[i] &lt;- integrate(function(b){f_E0_b(b) * fb(b)}, lower = bcr[i], upper = Inf)$value / (1 - Pr)\n  }\n  list(FAR = FAR, HR = HR)\n}\n\nroc_n &lt;- function(rpot, Pcr, Pr = 1 / 3) {\n  sb &lt;- sqrt(rpot)\n  se &lt;- sqrt(1 - rpot)\n  qa &lt;- qnorm(1 - Pr)\n  qb &lt;- qnorm(Pr)\n  fb &lt;- function(b) {dnorm(b, 0, sb)}\n  f_E0_b &lt;- function(b){1 - pnorm(qa, b, se) + pnorm(qb, b, se)}\n  f_E1_b &lt;- function(b){pnorm(qa, b, se) - pnorm(qb, b, se)}\n  Pcr &lt;- Pcr[Pcr &lt;= f_E1_b(0)]\n  n &lt;- length(Pcr)\n  bcr &lt;- rep(0, n)\n  for (i in 1:n) {\n    bcr[i] &lt;- uniroot(function(b){f_E1_b(b) - Pcr[i]}, c(0, 5))$root\n  }\n  HR &lt;- rep(0, n)\n  FAR &lt;- rep(0, n)\n  for (i in 1:n) {\n    HR[i] &lt;- integrate(function(b){f_E1_b(b) * fb(b)}, lower = -bcr[i], upper = bcr[i])$value / Pr\n    FAR[i] &lt;- integrate(function(b){f_E0_b(b) * fb(b)}, lower = -bcr[i], upper = bcr[i])$value / (1 - Pr)\n  }\n  list(FAR = FAR, HR = HR, Pcr = Pcr)\n}\n\npar(mar = c(4, 5, 2, 1), mfrow = c(1, 2))\nrpot &lt;- c(0.15, 0.3, 0.6)\nw &lt;- c(1, 2, 3)\n\nplot(1, type = \"n\", xlim = c(-0.1, 1), ylim = c(0, 1),\n     main = \"ROC curves for above/below normal\", xlab = \"FAR\", ylab = \"HR\",\n     asp = 1)\nfar_p &lt;- matrix(0, 9, 3)\nhr_p &lt;- matrix(0, 9, 3)\nfor (i in 1:3) {\n  Pcr &lt;- seq(0, 1, 0.01)\n  farhr &lt;- roc_ab(rpot[i], Pcr)\n  lines(farhr$FAR, farhr$HR, lwd = w[i])\n  Pcr &lt;- seq(0.1, 0.9, 0.1)\n  farhr &lt;- roc_ab(rpot[i], Pcr)\n  far_p[, i] &lt;- farhr$FAR\n  hr_p[, i] &lt;- farhr$HR\n  points(farhr$FAR, farhr$HR, pch = 16)\n}\ntext(farhr$FAR, farhr$HR, paste0(Pcr * 100, \"%\"), pos = 2)\nsegments(0, 0, 1, 1, lwd = 2, lty = 2)\nfor (i in 1:9) {\n  segments(far_p[i, 1], hr_p[i, 1], far_p[i, 2], hr_p[i, 2], lty = 3)\n  segments(far_p[i, 2], hr_p[i, 2], far_p[i, 3], hr_p[i, 3], lty = 3)\n}\nlegend(\"bottomright\", title = expression(rho[pot]^2), legend = rpot, lty = 1, lwd = w)\n\nplot(1, type = \"n\", xlim = c(-0.1, 1), ylim = c(0, 1),\n     main = \"ROC curves for normal\", xlab = \"FAR\", ylab = \"HR\",\n     asp = 1)\nfar_p &lt;- matrix(0, 3, 3)\nhr_p &lt;- matrix(0, 3, 3)\nfor (i in 1:3) {\n  Pcr &lt;- seq(0.01, 0.99, 0.01)\n  farhr &lt;- roc_n(rpot[i], Pcr)\n  lines(c(farhr$FAR, 0), c(farhr$HR, 0), lwd = w[i])\n  Pcr &lt;- seq(0.1, 0.9, 0.1)\n  farhr &lt;- roc_n(rpot[i], Pcr)\n  far_p[, i] &lt;- farhr$FAR[1:3]\n  hr_p[, i] &lt;- farhr$HR[1:3]\n  points(farhr$FAR, farhr$HR, pch = 16)\n}\ntext(farhr$FAR, farhr$HR, paste0(farhr$Pcr * 100, \"%\"), pos = 2)\nsegments(0, 0, 1, 1, lwd = 2, lty = 2)\nfor (i in 1:3) {\n  segments(far_p[i, 1], hr_p[i, 1], far_p[i, 2], hr_p[i, 2], lty = 3)\n  segments(far_p[i, 2], hr_p[i, 2], far_p[i, 3], hr_p[i, 3], lty = 3)\n}\nlegend(\"bottomright\", title = expression(rho[pot]^2), legend = rpot, lty = 1, lwd = w)"
  },
  {
    "objectID": "posts/roc.html#rocスキルスコア",
    "href": "posts/roc.html#rocスキルスコア",
    "title": "ROCスコア",
    "section": "ROCスキルスコア",
    "text": "ROCスキルスコア\nROCスコア \\(A_{\\mathrm{ROC}}\\) は、ROC曲線の下の面積で表され、スキルなしは \\(A_{\\mathrm{ROC}} = 0.5\\) 完璧な予報は \\(A_{\\mathrm{ROC}} = 1\\) である。\nROCスキルスコア \\(S_{\\mathrm{ROC}}\\) は次の式で定義される。\n\\[\nS_{\\mathrm{ROC}} = 2A_{\\mathrm{ROC}} - 1\n\\]\nROCスキルスコアで完璧な予報は\\(S_{\\mathrm{ROC}} = 1\\)、スキルなしは \\(S_{\\mathrm{ROC}} = 0\\) となる。\n\n\nCode\nint_trapeziodal &lt;- function(x, y) {\n  dx &lt;- abs(diff(x))\n  ybar &lt;- 0.5 * (y[-length(y)] + y[-1])\n  sum(dx * ybar)\n}\n\nsroc_ab &lt;- function(rpot, dpcr = 0.01) {\n  Pcr &lt;- seq(0, 1, dpcr)\n  farhr &lt;- roc_ab(rpot, Pcr)\n  aroc &lt;- int_trapeziodal(farhr$FAR, farhr$HR)\n  2 * aroc - 1\n}\n\nsroc_n &lt;- function(rpot, dpcr = 0.01) {\n  Pcr &lt;- seq(dpcr, 1, dpcr)\n  farhr &lt;- roc_n(rpot, Pcr)\n  x &lt;- farhr$FAR\n  y &lt;- farhr$HR\n  n &lt;- length(x)\n  if (x[1] &lt; 1) {\n    x &lt;- c(1, x)\n    y &lt;- c(1, y)\n  }\n  if (x[n] &gt; 0) {\n    x &lt;- c(x, 0)\n    y &lt;- c(y, 0)\n  }\n  aroc &lt;- int_trapeziodal(x, y)\n  2 * aroc - 1\n}\n\nrpot &lt;- seq(0.01, 0.99, 0.01)\nn &lt;- length(rpot)\ns_ab &lt;- rep(0, n)\ns_n &lt;- rep(0, n)\nfor (i in 1:n) {\n  s_ab[i] &lt;- sroc_ab(rpot[i])\n  s_n[i] &lt;- sroc_n(rpot[i])\n}\ns_ab &lt;- c(0, s_ab, 1)\ns_n &lt;- c(0, s_n, 1)\nrpot &lt;- c(0, rpot, 1)\n\npar(mar = c(4, 5, 2, 1))\nplot(rpot, s_ab, type = \"l\", lwd = 2, asp = 1,\n     main = \"ROC skill score\",\n     xlab = expression(rho[pot]^2), ylab = expression(S[roc]),\n     cex.main = 2, cex.axis = 2, cex.lab = 2)\nlines(rpot, s_n, lwd = 2, lty = 2)\nlegend(\"topleft\", c(\"above/below\", \"normal\"), lwd = 2, lty = c(1, 2), cex = 2)"
  },
  {
    "objectID": "posts/roc.html#rocの性質",
    "href": "posts/roc.html#rocの性質",
    "title": "ROCスコア",
    "section": "ROCの性質",
    "text": "ROCの性質\nROC曲線やスコアには次のような性質がある。\n\nEquation 3から、ROCスコアはある種のバイアスに対しては鈍感である。\n\\(P_1(\\beta) = P_2(a\\beta),\\,a \\ne 0\\) という関係にある二つの異なる予報は同一のROC曲線になり、スコアも同じである。\n信号ノイズ比を伸縮してもROCスコアは不変であり、そのためROCスコアは実際のスコアではなく、潜在的スコアと解釈すべきである。"
  },
  {
    "objectID": "posts/bfgs.html",
    "href": "posts/bfgs.html",
    "title": "BFGS",
    "section": "",
    "text": "数値最適化はデータ同化や機械学習などで、データから最適解を求めるための数値手法である。\n函数\\(f(\\mathbf{x})\\)が最小になるような\\(\\mathbf{x}\\)を求める問題を考える。 \\(\\mathbf{x}\\)は制御変数と呼ばれ、初期値を推定するデータ同化では自由度\\(n\\)の場を表す。 \\(\\mathbf{x}\\)の近傍で\\(f(\\mathbf{x})\\)が二次に近いと仮定し、 \\(\\mathbf{x}\\)から\\(\\mathbf{d}\\)だけ変化させた$f(+ )をテーラー展開で二次まで近似する。\n\\[\nf(\\mathbf{x} + \\mathbf{d}) \\approx f(\\mathbf{x}) +\\mathbf{g}^\\mathrm{T}\\mathbf{d} + \\mathbf{d}^\\mathrm{T}\\mathbf{G}\\mathbf{d}\n\\]\nここで、\\(\\mathbf{g} = \\nabla f(\\mathbf{x})\\)は勾配、\\(\\mathbf{G} = \\nabla^2 f(\\mathbf{x})\\)はヘシアンである。\n代表的な準ニュートン法であるBFGS法 Goldfarb (1970)は、へシアン逆行列を明示的に計算することなく、曲率についての情報を函数値や勾配から構築し、反復の中で以下のBFGS公式に基づいて更新する (Nocedal and Stephen J. Wright 2006)。\n\\[\n\\mathbf{H}_{k+1} = \\mathbf{V}_k^\\mathrm{T}\\mathbf{H}_k\\mathbf{V}_k + \\rho_k\\mathbf{s}_k\\mathbf{s}_k^\\mathrm{T}\n\\tag{1}\\]\nここで、\\(k\\)は反復の番号、\\(\\mathbf{s}_k = \\mathbf{x}_{k+1} - \\mathbf{x}_k\\)、\\(\\mathbf{y}_k = \\nabla f_{k+1} - \\nabla f_k\\)、\\(\\mathbf{V}_k = \\mathbf{I} - \\rho_k\\mathbf{y}_k \\mathbf{s}_k^\\mathrm{T}\\)及び\\(\\rho_k = 1/\\mathbf{y}_k^\\mathrm{T}\\mathbf{s}_k\\)である。\n二次函数の仮定の下では、ステップ幅はおよそ1なので、ステップ幅計算は省略する。 BFGSには、ヘシアン逆行列を明示的に保存せずに、過去のステップと勾配から行列ベクトル積\\(\\mathbf{G}^{-1}\\mathbf{g}\\)を更新するメモリ節約版もあるが、モデルの自由度が小さい場合を考えて、ここではヘシアン逆行列を明示的に保存する。\nBFGSはR標準の{stat}のoptim(method = \"BFGS\")に実装されている。 その他いくつかのパッケージで使える（Taskview Optimization参照）。\nパッケージの最適化手法で、最適化中のコスト函数や勾配ノルムの履歴を出力するには、大域変数に記録する。 捕食・被食モデルに組込の optim() を使った例を示す。 ログを出力できるものもあるが、テキスト処理が必要になる。\n\nbfgs &lt;- function(par, fn, gr, ..., control){\n  control &lt;- modifyList(list(\n    maxit = 100, debug = FALSE,\n    ctol = 1e-10, gtol = 1e-7, stol = 1e-7), control)\n if (control$debug)  print(control)\n  \n  n &lt;- length(par)\n  H &lt;- diag(n)\n  g &lt;- gr(par, ...)\n  alpha &lt;- min(1, 1. / sum(abs(g)))\n  new_par &lt;- par - alpha * g\n  s &lt;- -alpha * g\n  y &lt;- gr(new_par, ...) - g\n  ys &lt;- sum(y * s)\n  H &lt;- ys / sum(y * y) * diag(n)\n  if (control$debug) cat(\"Initial Hessian:\", H, \"\\n\")\n  \n  cost &lt;- rep(0, control$maxit + 1)\n  gnorm.hist &lt;- rep(0, control$maxit + 1)\n  par.hist &lt;- matrix(0, nrow = control$maxit + 1, ncol = n)\n\n  for (iter in seq_len(control$maxit)) {\n    cost[iter] &lt;- fn(par, ...)\n    \n    gnorm &lt;- sqrt(sum(g^2))\n    gnorm.hist[iter] &lt;- gnorm\n    par.hist[iter, ] &lt;- par\n\n    if (control$debug) cat(\"Iteration:\", iter, \"Cost:\", cost[iter], \"Gradient Norm:\", gnorm, \"\\n\")   \n    if (gnorm &lt; control$gtol) {\n      convergence &lt;- 0\n      break\n    }\n    if (max(abs(s)) &lt; control$stol) {\n      convergence &lt;- 1\n      break\n    }\n\n    new_par &lt;- par - drop(H %*% g)\n    s &lt;- new_par - par\n    new_gr &lt;- gr(new_par, ...)\n    y &lt;- new_gr - g\n    ys &lt;- sum(y * s)\n    if (ys &gt; control$ctol) {\n      rho &lt;- 1 / ys\n      H &lt;- (diag(n) - rho * outer(s, y)) %*% H %*% (diag(n) - rho * outer(y, s)) + rho * outer(s, s)\n      if (control$debug)  cat(\"Updated Hessian:\", H, \"\\n\")\n    } else {\n      H &lt;- ys / sum(y * y) * diag(n)\n      if (control$debug)  cat(\"Reset Hessian:\", H, \"\\n\")\n    }\n    if (iter == control$maxit) {\n      convergence &lt;- 2\n    }\n    \n    par &lt;- new_par\n    g &lt;- new_gr\n  }\n  \n  list(par = par.hist[1:iter, ], convergence = convergence,\n       cost = cost[1:iter], gnorm = gnorm.hist[1:iter])\n}\n\nこのコードでは、勾配からステップ幅を計算し、\n\\[\n\\mathbf{H} = \\frac{\\mathbf{s}^\\mathrm{T}\\mathbf{y}}{\\mathbf{y}^\\mathrm{T}\\mathbf{y}}\\mathbf{I}\n\\] を初期のヘシアン逆行列とする。 ここで、\\(\\alpha = 1/\\sum_j|g_j|\\,j = 1, \\dots, n\\)、\\(\\mathbf{s} = -\\alpha\\mathbf{g}_0\\)、\\(\\mathbf{y} = \\mathbf{g}(\\mathbf{x}_0-\\alpha\\mathbf{g}_0) - \\mathbf{g}(\\mathbf{x}_0)\\)\n曲率条件\\(\\mathbf{s}^\\mathrm{T}\\mathbf{y} &gt; 0\\)を満たす必要があるので、一定値を下回った場合はヘシアン逆行列を上式で初期化する。\nRosenbrock函数\n\\[\nf(x, y) = (1 - x)^2 + 100(y - x^2)^2\n\\] を\\((-1.2, 1)\\)から最小化してみよう。\n\nrosen &lt;- function(x, y) {\n  (1 - x)^2 + 100 * (y - x^2)^2\n}\n\nrosen.gr &lt;- function(x, y) {\n  c(-2 * (1 - x) - 400 * x * (y - x^2), 200 * (y - x^2))\n}\n\nrosen.bfgs &lt;- function(par, control = list()) {\n  control &lt;- modifyList(list(maxit = 100, gtol = 1e-6), control)\n  \n  bfgs(par,\n       function(w){rosen(w[1], w[2])},\n       function(w){rosen.gr(w[1], w[2])}, control = control)\n}\n\nresult &lt;- rosen.bfgs(c(-1.2, 1), control = list(maxit = 100, gtol = 1e-7))\n\nコスト函数は8ステップまで減少しているが、その後乱高下し、13ステップ目で大きく低下し、その後の変化は小さい。\n\npar(mar = c(4, 5, 2, 2))\nplot(1:length(result$cost), log10(result$cost), type=\"b\", pch=19, cex=2, lwd=2,\n     xlab=\"iteration\", ylab=\"log10(cost)\", main=\"Rosenbrock BFGS\",\n     cex.main=2, cex.axis=2, cex.lab=2)\n\n\n\n\n\n\n\n\n一方、勾配ノルムは5ステップ目まで減少し、その後上昇に転じる。 11ステップ目で急増するが、その後大きく減少する。 最終的な勾配ノルムは閾値\\(1 \\times 10^{-7}\\)よりも大きい。\n\npar(mar = c(4, 5, 2, 2))\nplot(1:length(result$cost), log10(result$gnorm), type=\"b\", pch=19, cex=2, lwd=2,\n     xlab=\"iteration\", ylab=\"log10 |g|\", main=\"Rosenbrock BFGS\",\n     cex.main=2, cex.axis=2, cex.lab=2)\n\n\n\n\n\n\n\n\n収束はしておらず、コストの変化が小さくなったために打ち切られている。\n\nresult$convergence\n\n[1] 1\n\n\n次に、Rosenbrock函数の等高線を描画し、最適化の経路を重ねてみる。\n\nxax &lt;- seq(-2, 2, length.out=1001)\nyax &lt;- seq(0, 2, length.out=1001)\nz &lt;- outer(xax, yax, rosen)\nloglevs &lt;- c(1, 3, 10, 30, 100, 300, 1000, 3000, 10000)\ncontour(xax, yax, z, levels=loglevs, xlab=\"x\", ylab=\"y\",  \n        main=\"Rosenbrock BFGS\", lwd=2, \n        labcex=2, cex.main=2, cex.axis=2, cex.lab=2)\npoints(result$par[, 1], result$par[, 2], pch=19, cex=2)\nlines(result$par[, 1], result$par[, 2], lwd=3)\ntext(result$par[, 1], result$par[, 2], 1:length(result$cost), pos=c(1, 1, 4), offset=1, cex=2)\n\n\n\n\n\n\n\n\n線型探索をしていないので、コストは単調減少ではない。 8〜9ステップ目で勾配を登ることにより、最小値\\(x=1\\)のある\\(x&gt;0\\)側に移動している。\n\n\n\n\nReferences\n\nBroyden, C. G., 1970: The convergence of a class of double-rank minimization algorithms 1. General considerations. IMA J. Appl. Math., 6, 76–90, https://doi.org/10.1093/imamat/6.1.76.\n\n\nFletcher, R., 1970: A new approach to variable metric algorithms. The Computer Journal, 13, 317–322, https://doi.org/10.1093/comjnl/13.3.317.\n\n\nGoldfarb, D., 1970: A family of variable-metric methods derived by variational means. Math. Comput., 24, 23–26, https://doi.org/10.1090/S0025-5718-1970-0258249-6.\n\n\nNocedal, J., and Stephen J. Wright, 2006: Numerical Optimization. 2nd ed. Springer,.\n\n\nShanno, D. F., 1970: Conditioning of quasi-Newton methods for function minimization. Math. Comput., 24, 647–656, https://doi.org/10.1090/S0025-5718-1970-0274029-X."
  },
  {
    "objectID": "posts/geta.html",
    "href": "posts/geta.html",
    "title": "下駄を履いたグラフ",
    "section": "",
    "text": "曲線が重なっているとき、定数を加えてずらして描くと見やすくなる。 範囲を指定して、軸だけの空のグラフを作る。 y軸を反転させている。\n\nplot(NULL, type=\"n\", xlab=\"x\", ylab=\"y\", xlim=c(0, 2*pi), ylim=c(5, 1))\nx &lt;- seq(0, 2*pi, length.out=101)\nlines(x, sin(x) + 2)\nlines(x, cos(x) + 4)"
  },
  {
    "objectID": "posts/json.html",
    "href": "posts/json.html",
    "title": "アメダス地点",
    "section": "",
    "text": "気象庁のアメダス地点はJSON形式で提供されている。 RでJSONを扱うパッケージは複数あるが、ここではjsonliteを使う。\nfromJSON() にURLを文字列で渡すと、内容に応じてRのクラスが選択される。 アメダス地点の場合は、リストが返ってくる。 緯度、経度、標高、漢字の地点名を取得して、data.frameを作成する。 地点番号は行の名前に使う。\n\nlibrary(jsonlite)\n\nurl &lt;- \"https://www.jma.go.jp/bosai/amedas/const/amedastable.json\"\njson &lt;- fromJSON(url)\nstation.id &lt;- names(json)\n\n緯度 lat と経度 lon は度と分秒のベクトルとしてリストの中に格納されている。十進法に直す deg2decimal() とリストの中の lat と lon にこれを適用する函数を用意する。\n\ndeg2decimal &lt;- function(d) {\n  dmat &lt;- matrix(d, ncol = 2)\n  dmat[, 1] + dmat[, 2] / 60\n}\n\ndec.lonlat &lt;- function(lst) {\n  lst$lon &lt;- deg2decimal(lst$lon)\n  lst$lat &lt;- deg2decimal(lst$lat)\n  lst\n}\n\n列の数を指定して、空の data.frame を作るには、行の数が0である matrix を渡す。\n\ncn &lt;- c(\"lat\", \"lon\", \"alt\", \"kjName\")\ndf &lt;- data.frame(matrix(ncol = length(cn), nrow = 0))\n\ncolnames(df) &lt;- c(cn)\nfor (id in station.id) {\n  stn &lt;- dec.lonlat(json[[id]])\n  df &lt;- rbind(df, stn[cn])\n}\nrownames(df) &lt;- station.id\nhead(df)\n\n           lat      lon alt   kjName\n11001 45.52000 141.9350  26   宗谷岬\n11016 45.41500 141.6783   3     稚内\n11046 45.30500 141.0450  65     礼文\n11061 45.40333 141.8017   8     声問\n11076 45.33500 142.1700  13 浜鬼志別\n11091 45.24167 141.1867  30     本泊\n\n\nアメダスの分布を散布図で描画してみよう。\n\nplot(df$lon, df$lat, pch = 20, cex = 0.5, asp = 1)\n\n\n\n\n\n\n\n\n標高を規格化して、色をつけてみる。\n\nncol &lt;- 100\ncp &lt;- hcl.colors(ncol, \"Terrain2\")\nalt.min &lt;- 0\nalt.max &lt;- 3000\nalt.normalized &lt;- (df$alt - alt.min) / (alt.max - alt.min)\ncl &lt;- cp[ceiling(alt.normalized * (ncol - 1) + 1)]\n\nlayout(matrix(c(1, 2), ncol = 2), widths = c(0.85, 0.15))\n\npar(mar = c(5, 4, 3, 1) + 0.1)\nplot(df$lon, df$lat,\n     pch = 20, cex = 0.5, asp = 1, col = cl,\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5,\n     main = \"AMeDAS station\", xlab = \"lon\", ylab = \"lat\")\n\npar(mar = c(5, 0., 3, 4) + 0.1)\nimage(x = 1, y = 0:ncol, z = matrix(0:ncol, 1, ncol),\n      col = cp, axes = FALSE, xlab = \"\", ylab = \"\")\nleg &lt;- seq(0, alt.max, 500)\naxis(4, at = seq(0, ncol, length.out = length(leg)), las = 2, labels = leg, cex.axis = 1.5)\nmtext(\"altitude m\", side = 3, line = 1.5, cex = 1.5)"
  },
  {
    "objectID": "posts/vectorize.html",
    "href": "posts/vectorize.html",
    "title": "ベクトル化",
    "section": "",
    "text": "5つの乱数を2組生成して、分散と共分散を多数計算する。\n\nn &lt;- 10000\nm &lt;- 5\ndof &lt;- m - 1\n\nforループで書いたが、nが大きくなると遅くなる。\n\nset.seed(514)\nstart &lt;- Sys.time()\n\nfor (i in 1:n) {\n  x &lt;- scale(rnorm(m), scale = FALSE)\n  xx &lt;- var(x)\n  y &lt;- scale(rnorm(m), scale = FALSE)\n  yx &lt;- cov(x, y)\n}\nt.loop &lt;- Sys.time() - start\n\napplyを使ってループを回避したが、全く速くならず、むしろ遅くなる。 n=1000000のように大きくなると、cov()の計算が原因でメモリ（ヒープ）が不足する。 種は固定しているが、rnorm()の呼び出しの順番が異なるので同一の結果にはならない。\n\nset.seed(514)\nstart &lt;- Sys.time()\n\nx &lt;- matrix(rnorm(m * n), nrow = m) |&gt;\n  apply(2, scale, scale = FALSE)\ny &lt;- matrix(rnorm(m * n), nrow = m) |&gt;\n  apply(2, scale, scale = FALSE)\nPb &lt;- apply(x, 2, var)\nyx &lt;- diag(cov(x, y)) \n#yx &lt;- numeric(n)\n#for (i in 1:n) {\n#  yx[i] &lt;- cov(Xb[, i], y[, i])\n#} \nt.apply &lt;- Sys.time() - start\n\nscale()にはmatrixを与えることができ、列に対する正規化を行う。 分散は偏差平方平均、共分散は偏差の積の平均なので、要素積をして平均する。 apply(x^2, 2, mean)やapply(x * y, 2, mean)よりもcolMeans()の方が速い。 平均は標本数で割るので、係数を調整する。\n\nset.seed(514)\nstart &lt;- Sys.time()\n\nx &lt;- scale(matrix(rnorm(m * n), nrow = m), scale = FALSE) \ny &lt;- scale(matrix(rnorm(m * n), nrow = m), scale = FALSE)\nv &lt;- colMeans(x^2) * m / dof\nyx &lt;- colMeans(x * y) * m / dof\n\nt.vec &lt;- Sys.time() - start\n\ntinytableで表にします。\n\nlibrary(tinytable)\n\ncode &lt;- c(\"loop\", \"apply\", \"vec\")\ntime &lt;- as.numeric(c(t.loop, t.apply, t.vec))\nspeedup &lt;- as.numeric(t.loop) / time\ndf &lt;- data.frame(code, time, speedup)\ntt(df, digits = 2, align = \"d\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                code\n                time\n                speedup\n              \n        \n        \n        \n                \n                  loop\n                  0.3685\n                  1\n                \n                \n                  apply\n                  0.6089\n                  0.61\n                \n                \n                  vec\n                  0.0024\n                  151.81"
  },
  {
    "objectID": "posts/shift.html",
    "href": "posts/shift.html",
    "title": "shift",
    "section": "",
    "text": "Rにない函数。headとtailを使う。\n\nshift &lt;- function(x, n) {\n  if (n == 0) {\n    x\n  } else {\n    c(tail(x, n), head(x, -n))\n  }\n}\nshift(1:9,3)\n\n[1] 7 8 9 1 2 3 4 5 6\n\nshift(1:9,-2)\n\n[1] 3 4 5 6 7 8 9 1 2"
  },
  {
    "objectID": "posts/step.html",
    "href": "posts/step.html",
    "title": "折れ線ヒストグラム",
    "section": "",
    "text": "ヒストグラムの統計結果hの分割点はh$breaks、密度はh$densityに入っている。 分割点の数は密度よりも一つ多い。\nstepfun()を用いると簡単。\\((x_1, x_2, \\dots, x_n)\\)よりも\\((y_0, y_1, \\dots, y_n)\\)が一つ多いことに注意。既定では区間\\([x_{i}, x_{i+1}]\\)の一定値\\(c_i = (1 - f)y_i + fy_{i+1}\\)なので、区間の右の重み\\(f\\)を0にすると\\(x_i\\)に\\(y_i\\)が使われる。\n\nn &lt;- 1000\nm &lt;- 5\ndof &lt;- m - 1\nchisq &lt;- rchisq(n, dof)\nh &lt;- hist(chisq, breaks = 100, plot = FALSE)\nplot(h$breaks, dchisq(h$breaks, dof), type = \"l\", lwd = 2, xlab = \"chisq\", ylab = \"density\", ylim = c(0, max(h$density)))\nlines(stepfun(h$breaks, c(NA, h$density, NA), f = 0), do.points = FALSE)\n\n\n\n\n\n\n\n\nstepfun()を使わない方法。折れ線を描くために、分割点は最初の点と最後の点の間の要素を値を、密度は全体を複製する。\n\nn &lt;- 1000\nm &lt;- 5\ndof &lt;- m - 1\nchisq &lt;- rchisq(n, dof)\nh &lt;- hist(chisq, breaks = 100, plot = FALSE)\nplot(c(h$breaks[1], rep(h$breaks[2:(length(h$breaks)-1)], each = 2),\n       h$breaks[length(h$breaks)]), rep(h$density, each = 2),\n  xlab = \"chisq\", ylab = \"density\", type=\"l\")\nlines(h$breaks, dchisq(h$breaks, dof), lw = 2)"
  },
  {
    "objectID": "posts/vector.html",
    "href": "posts/vector.html",
    "title": "ベクトル",
    "section": "",
    "text": "Rではデータ構造を操作する。 スカラーが基本型である言語が多いが、Rでは、最も簡単なデータ構造はベクトル。 スカラーは長さ1のベクトル。 c()函数はベクトルをつなげたベクトルを返す。\n\nx &lt;- c(10.4, 5.6, 3.1, 6.4, 21.7)\n\n&lt;-は代入。向きを変えることもできる。\n\nc(10.4, 5.6, 3.1, 6.4, 21.7) -&gt; x\n\n結果を表示するには()で囲む。\n\n(a &lt;- 3)\n\n[1] 3\n\n\n式をコマンドとした場合は値は印字され、破棄される。\n\n1/x\n\n[1] 0.09615385 0.17857143 0.32258065 0.15625000 0.04608295\n\n\nc()はベクトルを引数に取ることもできる。\n\ny &lt;- c(x, 0, x)\n\n二つのxの間に要素を一つ加えた長さ11のベクトルがyに代入される。\n\nベクトルの算術式は要素毎で一番長いものに合わせる。短いベクトルは再利用される。"
  },
  {
    "objectID": "posts/interactive.html",
    "href": "posts/interactive.html",
    "title": "起動と終了",
    "section": "",
    "text": "UNIXのシェルのようにRを対話的に使うことができる。 入力データや、生成したデータや画像をディレクトリ（フォルダ）にまとめておくと便利。\nターミナルでディレクトリを作成して、そのディレクトリに移動する。\nmkdir work\ncd work\n続いてRを起動する。\nR\nWindows上のPowerShellの場合Rは前のコマンドを実行するInvoke-Historyをエイリアスなので、R.exeとタイプする必要がある。 Rを終了するにはq()を実行する。 終了時に生成したオブジェクトを.RDataに保存するか聞かれる。 作業ディレクトリを分けないと、同じ名前のオブジェクトがせぬふるまいの原因になりうる。 終了時にnを選択し、データを保存しない方がよい。\n\nRで使える文字はlocale依存だが、英数字と . _ である。\n.で始まる名前の2文字目に数字は使えない。\nコマンドは数式または代入。\n数式の場合は評価されて、表示され、破棄される。\n代入は評価されて、変数に値が渡され、自動的には表示されない。\n行の最後で不完全な場合、プロンプトが+になり、入力待ちになる。\nコマンドの履歴は上矢印キーで参照できる。\n\nファイルに保存されているコマンドは\nsource(\"commands.R\")\nで実行できる。\nsink(\"record.lis\")\nは実行後の出力先をファイルに振り向ける。\nsink()\nにより出力がコンソールに戻る。\nRのセッションで生成されたオブジェクトはobjects()またはls()で確認できる。\nrm(x, y, z)\nで削除できる。"
  },
  {
    "objectID": "posts/remove-alias.html",
    "href": "posts/remove-alias.html",
    "title": "PowerShellでR",
    "section": "",
    "text": "WindowsのPowerShellではRはInvoke-Historyのエイリアスになっているので、Rを起動するにはR.exeとタイプする必要がある。 このエイリアスを削除すれば、RとタイプすればRが起動するようになる。 エイリアスの削除はRemove-Aliasを用いる。 PowerShellの設定ファイル$profileをエディタで開いて次を記述する。\nRemove-Alias -Name R"
  },
  {
    "objectID": "posts/relfreq.html",
    "href": "posts/relfreq.html",
    "title": "相対頻度のヒストグラム",
    "section": "",
    "text": "hist()は折れ線を描く函数だが、plot = FALSEで統計のみにする。 頻度を総数で割り、相対頻度にしてplot()で描画する。\n\nn &lt;- 1000\nm &lt;- 5\ndof &lt;- m - 1\nchisq &lt;- rchisq(n, dof)\nh &lt;- hist(chisq, breaks = 100, plot = FALSE)\nh$counts &lt;- h$counts / sum(h$counts)\nplot(h, ylab = \"relative frequency\", axes = FALSE)\naxis(1)\naxis(2)"
  },
  {
    "objectID": "posts/dir2deg.html",
    "href": "posts/dir2deg.html",
    "title": "16方位を角度に",
    "section": "",
    "text": "アメダスの16方位を角度に変換する函数。 角度をseqで生成して、それぞれの名前を方角にする。 方角を与えると角度を返す。 ベクトル化されているので、複数の方角を渡すことができる。\n\ndir2deg &lt;- function(x) {\n  dir &lt;- seq(0, 360, length.out=17)[1:16]\n  names(dir) &lt;- c(\"北\", \"北北東\", \"北東\", \"東北東\",\n                  \"東\", \"東南東\", \"南東\", \"南南東\", \n                  \"南\", \"南南西\", \"南西\", \"西南西\", \n                  \"西\", \"西北西\", \"北西\", \"北北西\")\n  dir[x]\n}\ndir &lt;- c(\"北\", \"北北東\", \"北東\", \"東北東\")\ndir2deg(dir)\n\n    北 北北東   北東 東北東 \n   0.0   22.5   45.0   67.5"
  },
  {
    "objectID": "posts/poisson1d.html",
    "href": "posts/poisson1d.html",
    "title": "1次元Poisson方程式",
    "section": "",
    "text": "1次元Poisson方程式を数値的に解いて誤差を調べてみます。"
  },
  {
    "objectID": "posts/poisson1d.html#定式化",
    "href": "posts/poisson1d.html#定式化",
    "title": "1次元Poisson方程式",
    "section": "定式化",
    "text": "定式化\n内部領域\\(\\Omega:0 &lt; x &lt; 1\\)において\n\\[\n\\nabla^2 u = r\n\\tag{1}\\] が与えられ、境界 \\(\\partial\\Omega: x=0, x=1\\) で\\(u(0)=u(1)=0\\) （Dirichlet境界条件）であるとします。\n領域を\\(n\\)個に分割し、\\(x_0=0,\\,x_n=1\\)とする。Equation 1を中央差分で離散化します。\n\\[\n\\frac{\\phi_{i+1} + \\phi_{i-1} - 2\\phi_i}{h^2} = \\rho_i\n\\tag{2}\\]\n行列とベクトルを用いると、Equation 2を表すと次のように書けます。\n\\[\n\\begin{bmatrix}\n-2 & 1 & \\dots & 0\\\\\n1 & -2 & 1 & \\vdots\\\\\n\\vdots & & \\ddots & \\\\\n0 & \\dots & 0 & -2\n\\end{bmatrix}\n\\begin{bmatrix}\n\\phi_1 \\\\\n\\phi_2 \\\\\n\\vdots \\\\\n\\phi_{n-1}\n\\end{bmatrix}=\n\\begin{bmatrix}\n\\rho_1 \\\\\n\\rho_2 \\\\\n\\vdots \\\\\n\\rho_{n-1}\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "posts/poisson1d.html#実装",
    "href": "posts/poisson1d.html#実装",
    "title": "1次元Poisson方程式",
    "section": "実装",
    "text": "実装\n\n\n高速フーリエ変換\n行列の固有値が\\(\\lambda_i=-4\\sin^2(i\\pi/2n)\\)であることを用いると、高速フーリエ変換（FFT）を用いて効率的に解くこともできます。 gsignalパッケージの離散sin変換dst()とその逆変換idst()を用いると次のように書けます。\n\nlibrary(gsignal)\n\npoisson.dst &lt;- function(r) {\n  n &lt;- length(r) + 1\n  eig.val &lt;- -4 * sin(0.5 * seq(n-1) * pi / n)^2\n  idst(dst(r) / eig.val)\n}"
  },
  {
    "objectID": "posts/poisson1d.html#テスト",
    "href": "posts/poisson1d.html#テスト",
    "title": "1次元Poisson方程式",
    "section": "テスト",
    "text": "テスト\n\nテスト函数\n\\[\nu(x) = x^2 - x^4\n\\tag{3}\\]\n\\(\\partial\\Omega\\)で0となります。\n\\[\nr(x) = 2 - 12x^2\n\\tag{4}\\]\n\nn &lt;- 65 # num of internal point + 1\nx0 &lt;- 0\nx1 &lt;- 1\nhx &lt;- (x1 - x0) / n\nx &lt;- seq(x0+hx, x1-hx, by=hx)\n\nf &lt;- function(x) {\n  x^2 - x^4\n}\n\nddf &lt;- function(x) {\n  2 - 12*x^2\n}\n\nptrue &lt;- f(x)\nq &lt;- ddf(x)\np0 &lt;- f(x0)\np1 &lt;- f(x1)\nr &lt;- q * hx^2\nr[1] &lt;- r[1] - p0\nr[length(r)] &lt;- r[length(r)] - p1\n\n\np &lt;- poisson.dst(r)\ndp &lt;- p - ptrue\nl2 &lt;- sqrt(mean(dp**2))\nlinf &lt;- max(abs(dp))\nplot(x, p, xlab=\"x\", ylab=\"p\", pch=4)\nlines(x, ptrue, col=\"red\")\ntext(0.0, 0.1, paste(\"l2=\", format(l2, digits=3),sep=\"\"), adj=0)\ntext(0.0, 0.07, paste(\"linf=\", format(linf, digits=3), sep=\"\"), adj=0)"
  },
  {
    "objectID": "posts/poisson1d.html#切断誤差",
    "href": "posts/poisson1d.html#切断誤差",
    "title": "1次元Poisson方程式",
    "section": "切断誤差",
    "text": "切断誤差\n\n差分法\n差分法の誤差を確認しましょう(LeVeque 2007)。 \\(u(x)\\)をTalyor展開すると次のようになります。\n\\[\n\\begin{aligned}\nu(x+h) &= u(x) + hu'(x) + \\frac{1}{2}h^2u''(x) + \\frac{1}{6}h^3u^{(3)}(x) \\\\\n&+ \\frac{1}{24}h^4u^{(4)}(x) + O(h^5)\\\\\nu(x-h) &= u(x) - hu'(x) + \\frac{1}{2}h^2u''(x) - \\frac{1}{6}h^3u^{(3)}(x) \\\\\n&+ \\frac{1}{24}h^4u^{(4)}(x) + O(h^5)\n\\end{aligned}\n\\tag{5}\\]\nPoisson方程式に現れる2階微分はEquation 5の差を取ることにより次のように書けます。 \\[\nD^2=u''(x) + \\frac{1}{12}h^2u^{(4)}(x) + O(h^6)\n\\]\n\\(h\\)が小さいとすると、主要な差分誤差は\n\\[\n\\tau= \\frac{1}{12}h^2u^{(4)}(x)\n\\] と見積もられます。\nこれを2回積分して\\(\\partial\\Omega\\)で誤差が0であることを利用して定数を定めると、Poisson解の誤差は次のように書けます。\n\\[\ne(x) = -\\frac{1}{12}h[u''(x)+\\{u''(0)-u''(1)\\}x-u''(0)]\n\\tag{6}\\] Equation 3の場合、Equation 6は \\[\ne(x) = -h^2x(1-x)\n\\tag{7}\\] となります。\n数値誤差とEquation 7を比較してみましょう。\n\nplot(x, dp, xlab=\"x\", ylab=\"p-ptrue\", pch=4)\nlines(x, hx * hx * x * (x - 1), xlab=\"\", ylab=\"\", col=\"red\")"
  },
  {
    "objectID": "posts/enso.html",
    "href": "posts/enso.html",
    "title": "ENSO",
    "section": "",
    "text": "Historic Oceanic Niño Index and Niño 3.4 DataのData file with monthly & seasonal values since 1854をクリックしてNINO34のSSTデータを取得。 year.endは適宜編集する。\n\n# https://bmcnoldy.rsmas.miami.edu/tropics/oni/ONI_NINO34_1854-2022.txt\ndom &lt;- \"NINO34\"\nyear.start &lt;- 1854\nyear.end &lt;- 2024\nfname &lt;- paste0(\"ONI_\", dom, \"_\", year.start, \"-\", year.end, \".txt\")\nenso &lt;- read.table(fname, header = TRUE, skip = 9)\nenso$yearmon &lt;- as.Date(paste0(enso$YEAR, \"-\", enso$MON.MMM, \"-15\"))\nenso[enso==-99.99] = NA\n\n±0.5°Cの期間に陰影をつけ、10年毎にラベルをつけ、2年毎に目盛を打つ。\n\nplot.sst &lt;- function(yearmon, sst.anom){\n  plot(yearmon, sst.anom, xaxt=\"n\",\n    type=\"l\", xlab = \"time\",  ylab=\"°C\",\n    ylim=c(-3, 3))\n  axis(1, at=pretty(yearmon, 10), labels=format(pretty(yearmon, 10), \"%Y\"))\n  axis(1, at=pretty(yearmon, 40), labels = FALSE, tck = -0.02)\n  axis(3, at=pretty(yearmon, 40), labels = FALSE, tck = -0.02)\n  axis(4)\n  polygon(c(yearmon, rev(yearmon)),\n          c(ifelse(sst.anom &lt; 0.5, 0.5, sst.anom),\n            rep(0.5, length(sst.anom))), col=\"pink\", border = FALSE)\n  polygon(c(yearmon, rev(yearmon)),\n          c(ifelse(sst.anom &gt; -0.5, -0.5, sst.anom),\n            rep(-0.5, length(sst.anom))), col=\"lightblue\", border = FALSE)\n  abline(h = -2, col = \"lightblue\", lty=2, lwd=2)\n  abline(h = -1, col = \"lightblue\", lty=2, lwd=1.5)\n  abline(h = -0.5, col = \"lightblue\", lty=2, lwd=1)\n  abline(h =  0.5, col = \"pink\", lty=2, lwd=1)\n  abline(h =  1, col = \"pink\", lty=2, lwd=1.5)\n  abline(h =  2, col = \"pink\", lty=2, lwd=2)\n}\n\n2段に分けてプロットする。\n\npar(mfrow=c(2, 1), mar=c(3, 3, 1, 1))\nperiod &lt;- enso$yearmon &gt;= as.Date(\"1871-01-01\") & enso$yearmon &lt; as.Date(\"1950-01-01\")\nyearmon &lt;- enso$yearmon[period]\nsst.anom &lt;- enso$NINO34_ANOM[period]\nplot.sst(yearmon, sst.anom)\ntitle(paste(dom, \"SST anomaly\"))\nperiod &lt;- enso$yearmon &gt; as.Date(\"1950-01-01\") & !is.na(enso$NINO34_ANOM)\nyearmon &lt;- enso$yearmon[period]\nsst.anom &lt;- enso$NINO34_ANOM[period]\nplot.sst(yearmon, sst.anom)"
  },
  {
    "objectID": "posts/hcl.html",
    "href": "posts/hcl.html",
    "title": "HCL色空間",
    "section": "",
    "text": "人が感じる色は赤と緑、黄色と青の二軸で表すのが自然とされている(Ihaka 2003)。 これを極座標で表したときの角度が色調（hue）、動径が彩度（chroma）である。 さらに輝度（luminance）を加えた円筒座標をHCL色空間という。 Rの既定の色空間はHCLである。\n知覚に関する色の選択として次のような条件が挙げられる(Ihaka 2003)。\n\nグラフの広い領域に高い彩度を使うことは避ける。注意が長く続き、残像により注意をそらす可能性があるためである。\nグラフで面積が重要なら、近い彩度の色を使う。明るい色は暗い色よりも、面積を大きく見えるためである。\n色をグループに属することを表すなら、色は見分けやすくすべきである。\n\nこれらの条件を満たす簡単な方法は、HCLを使うことである。 その方法は、知覚の上で一様な色空間で、輝度と彩度を同じに、色調を等間隔にするというものである。\nhcl.pals()でパレットの名前の一覧を表示できる。\n\nhcl.pals()\n\n  [1] \"Pastel 1\"      \"Dark 2\"        \"Dark 3\"        \"Set 2\"        \n  [5] \"Set 3\"         \"Warm\"          \"Cold\"          \"Harmonic\"     \n  [9] \"Dynamic\"       \"Grays\"         \"Light Grays\"   \"Blues 2\"      \n [13] \"Blues 3\"       \"Purples 2\"     \"Purples 3\"     \"Reds 2\"       \n [17] \"Reds 3\"        \"Greens 2\"      \"Greens 3\"      \"Oslo\"         \n [21] \"Purple-Blue\"   \"Red-Purple\"    \"Red-Blue\"      \"Purple-Orange\"\n [25] \"Purple-Yellow\" \"Blue-Yellow\"   \"Green-Yellow\"  \"Red-Yellow\"   \n [29] \"Heat\"          \"Heat 2\"        \"Terrain\"       \"Terrain 2\"    \n [33] \"Viridis\"       \"Plasma\"        \"Inferno\"       \"Rocket\"       \n [37] \"Mako\"          \"Dark Mint\"     \"Mint\"          \"BluGrn\"       \n [41] \"Teal\"          \"TealGrn\"       \"Emrld\"         \"BluYl\"        \n [45] \"ag_GrnYl\"      \"Peach\"         \"PinkYl\"        \"Burg\"         \n [49] \"BurgYl\"        \"RedOr\"         \"OrYel\"         \"Purp\"         \n [53] \"PurpOr\"        \"Sunset\"        \"Magenta\"       \"SunsetDark\"   \n [57] \"ag_Sunset\"     \"BrwnYl\"        \"YlOrRd\"        \"YlOrBr\"       \n [61] \"OrRd\"          \"Oranges\"       \"YlGn\"          \"YlGnBu\"       \n [65] \"Reds\"          \"RdPu\"          \"PuRd\"          \"Purples\"      \n [69] \"PuBuGn\"        \"PuBu\"          \"Greens\"        \"BuGn\"         \n [73] \"GnBu\"          \"BuPu\"          \"Blues\"         \"Lajolla\"      \n [77] \"Turku\"         \"Hawaii\"        \"Batlow\"        \"Blue-Red\"     \n [81] \"Blue-Red 2\"    \"Blue-Red 3\"    \"Red-Green\"     \"Purple-Green\" \n [85] \"Purple-Brown\"  \"Green-Brown\"   \"Blue-Yellow 2\" \"Blue-Yellow 3\"\n [89] \"Green-Orange\"  \"Cyan-Magenta\"  \"Tropic\"        \"Broc\"         \n [93] \"Cork\"          \"Vik\"           \"Berlin\"        \"Lisbon\"       \n [97] \"Tofino\"        \"ArmyRose\"      \"Earth\"         \"Fall\"         \n[101] \"Geyser\"        \"TealRose\"      \"Temps\"         \"PuOr\"         \n[105] \"RdBu\"          \"RdGy\"          \"PiYG\"          \"PRGn\"         \n[109] \"BrBG\"          \"RdYlBu\"        \"RdYlGn\"        \"Spectral\"     \n[113] \"Zissou 1\"      \"Cividis\"       \"Roma\"         \n\n\n既定はviridisである。 hcl.pals()の引数に文字列で名前を渡すと、パレットが変わる。\nhcl.colors()に色の数を渡すと、16進数でRGBの文字列ベクトルが返される。\n\nhcl.colors(5)\n\n[1] \"#4B0055\" \"#00588B\" \"#009B95\" \"#53CC67\" \"#FDE333\"\n\n\ncolorspaceを使うと、パレットを描画できる。(Zeileis et al. 2020)\n\nlibrary(colorspace)\nhcl_palettes(plot = TRUE)\n\n\n\n\n\n\n\n\n\ncolorspace: A Toolbox for Manipulating and Assessing Colors and Palettes\nHCL-Based Color Palettes in grDevices\nデザインで「人間が感覚的に見分けやすい色」を選ぶ方法をデータ可視化のプロが解説\n\n\n\n\n\nReferences\n\nIhaka, R., 2003: Colour for Presentation Graphics. Proc. 3rd International Workshop on Distributed Statistical Computing, Vienna, Austria https://www.r-project.org/conferences/DSC-2003/Proceedings/Ihaka.pdf.\n\n\nZeileis, A., J. C. Fisher, K. Hornik, R. Ihaka, C. D. McWhite, P. Murrell, R. Stauffer, and C. O. Wilke, 2020: Colorspace: A toolbox for manipulating and assessing colors and palettes. J. Stat. Software, 96, https://doi.org/10.18637/jss.v096.i01."
  },
  {
    "objectID": "posts/nloptr.html",
    "href": "posts/nloptr.html",
    "title": "制約付き数値最適化",
    "section": "",
    "text": "nloptはCで書かれた非線型最適化ライブラリで、さまざまな言語から使うことができる。 Rのパッケージはnloptrで、nloptは別物である。"
  },
  {
    "objectID": "posts/nloptr.html#インストール",
    "href": "posts/nloptr.html#インストール",
    "title": "制約付き数値最適化",
    "section": "インストール",
    "text": "インストール\nまず、ライブラリをインストールする。 CコンパイラとCMakeが必要。 ソースを展開したら、その中でbuildディレクトリを作り、cmakeを実行し、makeからコンパイル、インストールを指示する。 インストール先として~/.localを指定し、Pythonのインターフェースも構築する例を示す。MacPortsで入れたPython (python313など)をsudo port select python python313してあり、/opt/local/bin/pythonというシンボリックリンクがあることを想定している。 PythonインターフェースはRから使うには不要である。\n% cmake .. -DDCMAKE_INSTALL_PREFIX=${HOME}/.local -DPython_EXECUTABLE=/opt/local/bin/python\n% make\n% make install\nRのインターフェースを構築する際には、pkg-configが用いられるので、確認しておく。 なお、MacPortsのパッケージ名はハイフンのないpkgconfigである。\n% pkg-config --libs nlopt\nあとはinstall.packages(\"nloptr\")をRのコンソールで実行してパッケージをインストールするだけである。"
  },
  {
    "objectID": "posts/nloptr.html#制約なし最適化",
    "href": "posts/nloptr.html#制約なし最適化",
    "title": "制約付き数値最適化",
    "section": "制約なし最適化",
    "text": "制約なし最適化\nVignettesにあるRosenbrock函数の最適化を試してみよう。\n\nlibrary(nloptr)\n\neval_f &lt;- function(x) {\n  100 * (x[2] - x[1] * x[1])^2 + (1 - x[1])^2\n}\n\neval_grad_f &lt;- function(x) {\n  c(-400 * x[1] * (x[2] - x[1] * x[1]) - 2 * (1 - x[1]), 200 * (x[2] - x[1] * x[1]))\n}\n\nx0 &lt;- c(-1.2, 1)\n\nopts &lt;- list(\"algorithm\" = \"NLOPT_LD_LBFGS\", \"xtol_rel\" = 1.0e-8)\n\nres &lt;- nloptr(x0 = x0,\n              eval_f = eval_f,\n              eval_grad_f = eval_grad_f,\n              opts = opts)\nres\n\n\nCall:\nnloptr(x0 = x0, eval_f = eval_f, eval_grad_f = eval_grad_f, opts = opts)\n\n\n\nMinimization using NLopt version 2.10.0 \n\nNLopt solver status: 1 ( NLOPT_SUCCESS: Generic success return value. )\n\nNumber of Iterations....: 56 \nTermination conditions:  xtol_rel: 1e-08 \nNumber of inequality constraints:  0 \nNumber of equality constraints:    0 \nOptimal value of objective function:  7.35727226897802e-23 \nOptimal value of controls: 1 1\n\n\n56ステップで収束した。 コスト函数と勾配の共通部分の計算を節約するために、二つをまとめることもできる。\n\neval_f_list &lt;- function(x) {\n  f1 &lt;- x[2] - x[1] * x[1]\n  f2 &lt;- 1 - x[1]\n  list(\n    \"objective\" = 100 * f1^2 + f2^2,\n    \"gradient\" = c(-400 * x[1] * f1 - 2 * f2, 200 * f1))\n}\n\nres &lt;- nloptr(x0 = x0,\n              eval_f = eval_f_list,\n              opts = opts)\nres\n\n\nCall:\nnloptr(x0 = x0, eval_f = eval_f_list, opts = opts)\n\n\nMinimization using NLopt version 2.10.0 \n\nNLopt solver status: 1 ( NLOPT_SUCCESS: Generic success return value. )\n\nNumber of Iterations....: 56 \nTermination conditions:  xtol_rel: 1e-08 \nNumber of inequality constraints:  0 \nNumber of equality constraints:    0 \nOptimal value of objective function:  7.35727226897802e-23 \nOptimal value of controls: 1 1"
  },
  {
    "objectID": "posts/nloptr.html#制約あり最適化",
    "href": "posts/nloptr.html#制約あり最適化",
    "title": "制約付き数値最適化",
    "section": "制約あり最適化",
    "text": "制約あり最適化\n次の制約あり最適化問題を考える。\n\\[\n\\min_{x \\in \\mathbb{R}^n}\\sqrt{x_2}\n\\] \\[\n\\begin{aligned}\n\\text{s.t.}\\;x_2 &\\ge 0\\\\\nx_2 &\\ge (a_1x_1 + b_1)^3\\\\\nx_2 &\\ge (a_2x_1 + b_2)^3\n\\end{aligned}\n\\]\nここで、\\(a_1 = 2,\\,b_1 = 0,\\,a_2 = -1,\\,b_2 = 1\\)である。 制約条件は \\(g(x)\\le 0\\) という形に書き換える。\n\\[\n\\begin{aligned}\n(a_1x_1 + b_1)^3 - x_2 &\\le 0\\\\\n(a_2x_1 + b_2)^3 - x_2 &\\le 0\n\\end{aligned}\n\\]\n勾配を用いる制約あり最適化はNLOPT_LD_MMA、NLOPT_LD_CCSAQ、NLOPT_LD_SLSQPが使える。 この中でNLOPT_LD_SLSQPのみ非線型の制約を課すことができる。 マニュアルではNLOPT_LD_CCSAQをまず試すことを勧めている。 この例では、NLOPT_LD_MMAが最も少ない21回で収束した。 NLOPT_LD_CCSAQは24回、NLOPT_LD_SLSQPは43回必要だった。\n\neval_f0 &lt;- function(x, a, b) {\n  sqrt(x[2])\n}\n\neval_grad_f0 &lt;- function(x, a, b) {\n  c(0, 0.5 / sqrt(x[2]))\n}\n\neval_g0 &lt;- function(x, a, b) {\n  (a * x[1] + b)^3 - x[2]\n}\n\neval_jac_g0 &lt;- function(x, a, b) {\n  rbind(c(3 * a[1] * (a[1] * x[1] + b[1])^2, -1.0),\n        c(3 * a[2] * (a[2] * x[1] + b[2])^2, -1.0))\n}\na &lt;- c(2, -1)\nb &lt;- c(0, 1)\n\nopts = list(\n  \"algorithm\" = \"NLOPT_LD_MMA\",\n  \"xtol_rel\" = 1.0e-8,\n  \"print_level\" = 2,\n  \"check_derivatives\" = TRUE,\n  \"check_derivatives_print\" = \"errors\"\n)\n\nres0 &lt;- nloptr(x0 = c(1.234, 5.678),\n               eval_f = eval_f0,\n               eval_grad_f = eval_grad_f0,\n               lb = c(-Inf, 0), ub = c(Inf, Inf),\n               eval_g_ineq = eval_g0,\n               eval_jac_g_ineq = eval_jac_g0,\n               opts = opts, a = a, b = b)\n\nChecking gradients of objective function.\n\n\nDerivative checker results: 0 error(s) detected.\n\n\nChecking gradients of inequality constraints.\n\n\nDerivative checker results: 0 error(s) detected.\n\n\niteration: 1\n    f(x) = 2.382855\n    g(x) = (9.354647, -5.690813)\niteration: 2\n    f(x) = 2.356135\n    g(x) = (-0.122988, -5.549587)\niteration: 3\n    f(x) = 2.245864\n    g(x) = (-0.531886, -5.038655)\niteration: 4\n    f(x) = 2.019102\n    g(x) = (-3.225103, -3.931195)\niteration: 5\n    f(x) = 1.740934\n    g(x) = (-2.676263, -2.761136)\niteration: 6\n    f(x) = 1.404206\n    g(x) = (-1.674055, -1.676216)\niteration: 7\n    f(x) = 1.022295\n    g(x) = (-0.748790, -0.748792)\niteration: 8\n    f(x) = 0.685203\n    g(x) = (-0.173206, -0.173207)\niteration: 9\n    f(x) = 0.552985\n    g(x) = (-0.009496, -0.009496)\niteration: 10\n    f(x) = 0.544354\n    g(x) = (-0.000025, -0.000025)\niteration: 11\n    f(x) = 0.544331\n    g(x) = (0.000000, 0.000000)\niteration: 12\n    f(x) = 0.544331\n    g(x) = (-0.000000, 0.000000)\niteration: 13\n    f(x) = 0.544331\n    g(x) = (-0.000000, 0.000000)\niteration: 14\n    f(x) = 0.544331\n    g(x) = (-0.000000, 0.000000)\niteration: 15\n    f(x) = 0.544331\n    g(x) = (-0.000000, 0.000000)\niteration: 16\n    f(x) = 0.544331\n    g(x) = (-0.000000, 0.000000)\niteration: 17\n    f(x) = 0.544331\n    g(x) = (-0.000000, 0.000000)\niteration: 18\n    f(x) = 0.544331\n    g(x) = (-0.000000, 0.000000)\niteration: 19\n    f(x) = 0.544331\n    g(x) = (0.000000, 0.000000)\niteration: 20\n    f(x) = 0.544331\n    g(x) = (-0.000000, -0.000000)\niteration: 21\n    f(x) = 0.544331\n    g(x) = (0.000000, 0.000000)\n\n\n\nx1 &lt;- seq(-1, 1.5, length.out = 101)\nplot(x1, (a[1] * x1 + b[1])^3, type = \"l\", lwd = 2,\n     xlim = c(0, 1.5), ylim = c(-2, 6),\n     xlab = \"x1\", ylab = \"x2\")\nlines(x1, (a[2] * x1 + b[2])^3, lwd = 2)\npoints(res0$x0[1], res0$x0[2], cex = 1.5, pch = 16, col = \"blue\")\npoints(res0$solution[1], res0$solution[2], cex = 1.5, pch = 16, col = \"red\")"
  },
  {
    "objectID": "posts/help.html",
    "href": "posts/help.html",
    "title": "ヘルプ",
    "section": "",
    "text": "RにはUNIXのmanのようなヘルプシステムがある。\nhelp(solve)\n次のようにすることもできる。\n?solve\nウェブブラウザでHTML版を表示するには\nhelp.start()\nとする。\n函数名などが分からない時は、\nhelp.search(solve)\nまたは\n??solve\nでヘルプを検索できる。\n例は次のようにして参照する。\nexample(solve)"
  },
  {
    "objectID": "posts/lonlatbox.html",
    "href": "posts/lonlatbox.html",
    "title": "経度・緯度の箱",
    "section": "",
    "text": "領域を示すために、経度と緯度を指定した箱を描くことがある。 地図投影投影すると、長方形でなくなり四隅を指定しただけでは、領域を正しく囲むことができなくなることがある。\nポーラーステレオの場合、四隅を指定すると台形で描かれてしまう。 そこで、経度を少しずつ変えた点を追加して曲がって見えるようにする。\n\ngenlonlat &lt;- function(lon1, lon2, lat1, lat2, dlon = 1) {\n  lon.seq &lt;- seq(lon1, lon2, by = dlon)\n  cbind(id = 1, part = 1,                                                         \n        c(lon.seq, rev(lon.seq), lon1),\n        c(rep(lat1, length(lon.seq)), rep(lat2, length(lon.seq)), lat1))\n}\ngenlonlat(120, 150, 20, 50, 5)\n\n      id part       \n [1,]  1    1 120 20\n [2,]  1    1 125 20\n [3,]  1    1 130 20\n [4,]  1    1 135 20\n [5,]  1    1 140 20\n [6,]  1    1 145 20\n [7,]  1    1 150 20\n [8,]  1    1 150 50\n [9,]  1    1 145 50\n[10,]  1    1 140 50\n[11,]  1    1 135 50\n[12,]  1    1 130 50\n[13,]  1    1 125 50\n[14,]  1    1 120 50\n[15,]  1    1 120 20\n\n\n低緯度（lat1）上で経度が増加するように、高緯度では rev() を使って減少させる。 最後に視点を追加して閉じている。 ホームディレクトリの~/.local/share/naturalearth/ne_50m に Natural Earth のデータを置いておく。 terra\n\nlibrary(terra)\n\nnedir &lt;- path.expand(\"~/.local/share/naturalearth/ne_50m\")\nlshp &lt;- file.path(nedir, \"/ne_50m_land.shp\")\nl50 &lt;- vect(lshp)\n\ncrdref &lt;- \"+proj=longlat +datum=WGS84\"\n\nlonlat.japan &lt;- genlonlat(120, 150, 20, 50)\npols.japan &lt;- vect(lonlat.japan, type = \"polygons\", crs = crdref)\n\nnewcrs &lt;- \"+proj=stere +lon_0=135e +lat_0=90n\"\nl50p &lt;- project(l50, newcrs)\npols.japan.p &lt;- project(pols.japan, newcrs)\ng &lt;- graticule(30, 30, crs=newcrs)\n\nplot(l50p, axes=FALSE, col=\"bisque\", background=\"lightblue\",\n     ext=ext(-1e+7, 1e7, -1e7, 1e7))\nplot(pols.japan.p, border = \"black\", lwd = 5, add = TRUE)\nplot(g, lab.cex = 1, add = TRUE)"
  },
  {
    "objectID": "posts/optperts.html",
    "href": "posts/optperts.html",
    "title": "最適摂動",
    "section": "",
    "text": "線型系\n\\[\n\\frac{\\mathrm{d}\\mathbf{u}}{\\mathrm{d}t} = \\mathbf{Au}\n\\]\nを考える。 ここで \\(\\mathbf{u}(t)\\) は時刻 \\(t\\) での状態、 \\(\\mathbf{A}\\) は線型化された力学演算子である。\nこの演算子が \\[\n\\mathbf{A} = \\begin{bmatrix}-1 & \\cot\\theta \\\\ 0 & -2\\end{bmatrix}\n\\]\nで与えられているときの時間発展 \\(\\mathrm{d}\\mathbf{u}/\\mathrm{d}t\\) を矢印で描き、大きさ \\(1\\) の摂動を円で、 \\((\\mathbf{A} + \\mathbf{A}^\\dagger)/2\\) の最大固有値に対応する単位固有ベクトル（数値的固有値の最大実部）と最も縮小する固有ベクトルを破線で描く。 順を追って示す。\nBase Rには円を函数はないので、区分的に直線を描く。\n\nplot(NULL, xlim = c(-1, 1), ylim = c(-1, 1), asp = 1,\n     main = \"Circle\", xlab = \"X\", ylab = \"Y\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\nangle &lt;- pi * seq(0, 2 * pi, length.out = 361)\nlines(cos(angle), sin(angle), col = \"black\", lwd = 2)\n\n\n\n\n\n\n\n\n最大瞬時成長率を持つ単位ノルム摂動は、 \\((\\mathbf{A} + \\mathbf{A}^\\dagger) / 2\\) を固有値解析することにより得られ、 対応する固有ベクトルは \\(x\\) 軸と \\(\\alpha = \\arctan(\\sin\\theta - 1) / \\cos\\theta\\) の角をなす。 これと直交する方向が最も縮小する。 \\(\\theta\\rightarrow 0\\) の極限では \\(\\alpha = -\\pi / 4\\) である。 abline() は簡単に直線を描くことができるが、範囲を区切ることはできないので、 segments() で始点と終点を指定して描画する。\n\nplot(NULL, xlim = c(-1, 1), ylim = c(-1, 1), asp = 1,\n     main = \"Circle with diameters\", xlab = \"X\", ylab = \"Y\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\nangle &lt;- pi * seq(0, 2 * pi, length.out = 361)\nlines(cos(angle), sin(angle), col = \"black\", lwd = 2)\nsegments(cos(3 * pi/4), sin(3 * pi/4), cos(-pi/4), sin(-pi/4), col = \"red\", lwd = 2)\nsegments(cos(pi/4), sin(pi/4), cos(5 * pi/4), sin(5 * pi/4), col = \"blue\", lwd = 2, lty = 2)\n\n\n\n\n\n\n\n\n\\(\\theta = \\pi / 100\\) の場合ついて、 \\(\\mathrm{d}\\mathbf{A}/\\mathrm{d}t\\) を矢印で描く。 矢印を描くには、 arrows() を使う。 segments() 同様 arrows() も始点と終点を指定する。 Rでは、スカラーは要素が1のベクトルなので、一つの矢印を描くのも、たくさん描くのも同様にできる。 矢印の中心を格子点の中心に置くことにする。 終点と始点は、適切な拡大縮小率を掛けて　\\(x,\\,y\\) 方向の成分を座標にそれぞれ加減する。 座標の位置は、expand.grid() を使って \\(x,\\,y\\) 方向それぞれ一次元のベクトルから生成する。\n\nx &lt;- seq(-1, 1, length.out = 10)\ny &lt;- seq(-1, 1, length.out = 10)\n\ntheta &lt;- pi / 100\nalpha &lt;- atan((sin(theta) - 1) / cos(theta))\n\ncot &lt;- function(theta) {\n  cos(theta) / sin(theta)\n}\namat &lt;- matrix(c(-1, 0, -cot(theta), -2), nrow = 2)\n\nxy &lt;- expand.grid(x = x, y = y)\nX &lt;- xy$x\nY &lt;- xy$y\nuv &lt;- amat %*% t(as.matrix(xy))\na &lt;- 0.005\nu &lt;- a * uv[1, ]\nv &lt;- a * uv[2, ]\n\nplot(NULL, xlim = c(-1, 1), ylim = c(-1, 1), asp = 1,\n     main = \"Tendencies θ = π/100\", xlab = \"X\", ylab = \"Y\",\n     cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)\narrows(X - u, Y - v, X + u, Y + v,\n       col = \"gray\", lwd = 2, length = 0.1, angle = 10)\nsegments(cos(alpha), sin(alpha), cos(alpha + pi), sin(alpha + pi), col = \"red\", lwd = 2)\nsegments(cos(alpha + pi/2), sin(alpha + pi/2), cos(alpha + 3*pi/2), sin(alpha + 3*pi/2), col = \"blue\", lwd = 2, lty = 2)\nangle &lt;- pi * seq(0, 2 * pi, length.out = 361)\nlines(cos(angle), sin(angle), col = \"black\", lwd = 2)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R中心生活（R中）",
    "section": "",
    "text": "PowerShellでR\n\n\n\nwindows\n\n\n\nPowerShellのエイリアスを削除する\n\n\n\n榎本剛\n\n\n\n\n\n\n\n\n\n\n\n\nベクトル\n\n\n\nbasics\n\n\n\nベクトルの操作\n\n\n\n榎本剛\n\n\n\n\n\n\n\n\n\n\n\n\nベクトル化\n\n\n\nperformance\n\n\ntable\n\n\n\nループ回避して高速化する\n\n\n\n榎本剛\n\n\n\n\n\n\n\n\n\n\n\n\n制約付き数値最適化\n\n\n\noptimization\n\n\npackage\n\n\n\nnloptr\n\n\n\n榎本剛\n\n\n\n\n\n\n\n\n\n\n\n\nヘルプ\n\n\n\nbasics\n\n\n\n函数や機能のヘルプを参照する\n\n\n\n榎本剛\n\n\n\n\n\n\n\n\n\n\n\n\nQR\n\n\n\ngraphics\n\n\npackage\n\n\n\nQRコード\n\n\n\n榎本剛\n\n\n\n\n\n\n\n\n\n\n\n\nROCスコア\n\n\n\nstatistics\n\n\n\nアンサンブル予報の評価\n\n\n\n榎本剛\n\n\nJul 28, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nアメダス地点\n\n\n\nformat\n\n\npackage\n\n\n\nJSONを読み解く\n\n\n\n榎本剛\n\n\nJun 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n最適摂動\n\n\n\ndynamics\n\n\ngraphics\n\n\n\n円、線分、矢印を描く\n\n\n\n榎本剛\n\n\nJun 20, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nBFGS\n\n\n\nDA\n\n\nML\n\n\noptimization\n\n\n\n準ニュートン法による数値最適化\n\n\n\n榎本剛\n\n\nMay 31, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n1次元Poisson方程式\n\n\n\nnumerics\n\n\n\n境界値問題を数値的に解く\n\n\n\n榎本剛\n\n\nMay 25, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n捕食・被食モデル\n\n\n\nmodel\n\n\nDA\n\n\noptimization\n\n\n\n随伴モデルの作成\n\n\n\n榎本剛\n\n\nMay 25, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n経度・緯度の箱\n\n\n\ngraphics\n\n\npackage\n\n\nterra\n\n\n\n経度と緯度で指定した領域の地図投影\n\n\n\n榎本剛\n\n\nApr 20, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nHCL色空間\n\n\n\ngraphics\n\n\npackage\n\n\n\nHCLで見やすい色を選ぶ\n\n\n\n榎本剛\n\n\nApr 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n相対頻度のヒストグラム\n\n\n\nstatistics\n\n\ngraphics\n\n\n\n頻度でも密度でもなく\n\n\n\n榎本剛\n\n\nJan 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n折れ線ヒストグラム\n\n\n\nstatistics\n\n\ngraphics\n\n\n\n棒グラフの代わりに折れ線で\n\n\n\n榎本剛\n\n\nJan 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n起動と終了\n\n\n\nbasics\n\n\n\nRを対話的に使う\n\n\n\n榎本剛\n\n\nNov 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n下駄を履いたグラフ\n\n\n\ngraphics\n\n\n\n曲線に定数を加えて見やすく\n\n\n\n榎本剛\n\n\nNov 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n16方位を角度に\n\n\n\nfunctions\n\n\n\n方角を角度に変換\n\n\n\n榎本剛\n\n\nOct 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nshift\n\n\n\nfunctions\n\n\n\n要素をずらす\n\n\n\n榎本剛\n\n\nOct 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nENSO\n\n\n\ngraphics\n\n\nclimate\n\n\n\nエルニーニョ・南方振動\n\n\n\n榎本剛\n\n\nOct 31, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]